import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
participants = []
raffle_settings = {
    "winners_count": 1,
    "is_active": False,
    "description": ""
}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} ({user.id}) –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.")
    await update.message.reply_text(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π! üéâ\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /setraffle, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à."
    )

# –ö–æ–º–∞–Ω–¥–∞ /setraffle
async def set_raffle(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} ({user.id}) –Ω–∞—á–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:"
    )
    context.user_data["step"] = "set_description"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    text = update.message.text

    if context.user_data.get("step") == "set_description":
        raffle_settings["description"] = text
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:"
        )
        context.user_data["step"] = "set_winners_count"
    elif context.user_data.get("step") == "set_winners_count":
        try:
            winners_count = int(text)
            if winners_count <= 0:
                await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
                return
            raffle_settings["winners_count"] = winners_count
            await update.message.reply_text(
                f"–†–æ–∑—ã–≥—Ä—ã—à –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {raffle_settings['description']}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {raffle_settings['winners_count']}\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /publishraffle, —á—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à."
            )
            context.user_data["step"] = None
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –ö–æ–º–∞–Ω–¥–∞ /publishraffle
async def publish_raffle(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not raffle_settings["description"]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /setraffle.")
        return

    raffle_settings["is_active"] = True
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} ({user.id}) –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —Ä–æ–∑—ã–≥—Ä—ã—à.")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —É—á–∞—Å—Ç–∏—è —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    keyboard = [
        [InlineKeyboardButton("–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üéÅ", web_app=WebAppInfo(url="https://github.com/overhaul11/Overhaul-Giveaway"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await update.message.reply_text(
        f"üéâ –†–æ–∑—ã–≥—Ä—ã—à –Ω–∞—á–∞–ª—Å—è! üéâ\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {raffle_settings['description']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {raffle_settings['winners_count']}\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    web_app_data = update.message.web_app_data.data
    logger.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {web_app_data}")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if user.id not in participants:
        participants.append(user.id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} ({user.id}) —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.")
        await update.message.reply_text(
            f"üéâ {user.first_name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à! üéâ"
        )
    else:
        await update.message.reply_text(
            f"üéâ {user.first_name}, –≤—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! üéâ"
        )

# –ö–æ–º–∞–Ω–¥–∞ /endraffle
async def end_raffle(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not raffle_settings["is_active"]:
        await update.message.reply_text("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return

    if not participants:
        await update.message.reply_text("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞. üò¢")
        logger.info("–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
    else:
        winners = random.sample(participants, min(raffle_settings["winners_count"], len(participants)))
        winner_names = []
        for winner_id in winners:
            winner = await context.bot.get_chat(winner_id)
            winner_names.append(f"{winner.first_name} (@{winner.username})")
        logger.info(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {', '.join(winner_names)}")
        await update.message.reply_text(
            f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {', '.join(winner_names)}! üéâ\n"
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéÅ"
        )
        participants.clear()
        raffle_settings["is_active"] = False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

def main() -> None:
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    TOKEN = "7868683592:AAEAjCPYx1u9LUlsuP32fx29nuSAFBYJtOI"

    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("setraffle", set_raffle))
    application.add_handler(CommandHandler("publishraffle", publish_raffle))
    application.add_handler(CommandHandler("endraffle", end_raffle))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    application.run_polling()

if __name__ == '__main__':
    main()